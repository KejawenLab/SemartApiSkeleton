{% set entityHumanize = entity | humanize %}
{% set entityLowerize = entity | lower %}
{% set entityUpper = entity | upper %}
{% set entityPluralDash = entity | pluralize | dash %}
<?php

declare(strict_types=1);

namespace Alpabit\ApiSkeleton\Controller\{{ entityHumanize }};

use Alpabit\ApiSkeleton\{{ entityHumanize }}\Model\{{ entityHumanize }}Interface;
use Alpabit\ApiSkeleton\{{ entityHumanize }}\{{ entityHumanize }}Service;
use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\View\View;
use Alpabit\ApiSkeleton\Security\Annotation\Permission;
use Nelmio\ApiDocBundle\Annotation\Security;
use Psr\Log\LoggerInterface;
use Swagger\Annotations as SWG;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * @Permission(menu="{{ entityUpper }}", actions={Permission::DELETE})
 *
 * @author Muhamad Surya Iksanudin<surya.iksanudin@alpabit.com>
*/
final class Delete extends AbstractFOSRestController
{
    private {{ entityHumanize }}Service $service;

    private LoggerInterface $logger;

    public function __construct({{ entityHumanize }}Service $service, LoggerInterface $auditLogger)
    {
        $this->service = $service;
        $this->logger = $auditLogger;
    }

    /**
    * @Rest\Delete("/{{ entityPluralDash }}/{id}")
    *
    * @SWG\Tag(name="{{ entityHumanize }}")
    * @SWG\Response(
    *     response=204,
    *     description="Delete {{ entityLowerize }}"
    * )
    *
    * @Security(name="Bearer")
    *
    * @param Request $request
    * @param string $id
    *
    * @return View
    */
    public function __invoke(Request $request, string $id): View
    {
        ${{ entityLowerize }} = $this->service->get($id);
        if (!${{ entityLowerize }} instanceof {{ entityHumanize }}Interface) {
            throw new NotFoundHttpException(sprintf('{{ entityHumanize }} ID: "%s" not found', $id));
        }

        $this->logger->info(sprintf('[%s][%s][%s]', $this->getUser()->getUsername(), __CLASS__, $id));

        $this->service->remove(${{ entityLowerize }});

        return $this->view(null, Response::HTTP_NO_CONTENT);
    }
}
