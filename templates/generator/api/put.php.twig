{%- set entityHumanize = entity | humanize -%}
{%- set entityLowerize = entity | lower -%}
{%- set entityUpper = entity | upper -%}
{%- set entityPluralDash = entity | pluralize | dash -%}
<?php

declare(strict_types=1);

namespace KejawenLab\Application\Controller\{{ entityHumanize }};

use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\Controller\Annotations\Put as Route;
use FOS\RestBundle\View\View;
use KejawenLab\Application\Entity\{{ entityHumanize }};
use KejawenLab\Application\Form\{{ entityHumanize }}Type;
use KejawenLab\Application\{{ entityHumanize }}\Model\{{ entityHumanize }}Interface;
use KejawenLab\Application\{{ entityHumanize }}\{{ entityHumanize }}Service;
use KejawenLab\ApiSkeleton\Form\FormFactory;
use KejawenLab\ApiSkeleton\Security\Annotation\Permission;
use Nelmio\ApiDocBundle\Attribute\Model;
use Nelmio\ApiDocBundle\Attribute\Security;
use OpenApi\Attributes as OA;
use OpenApi\Attributes\RequestBody;
use OpenApi\Attributes\Tag;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * @author Muhamad Surya Iksanudin<surya.iksanudin@gmail.com>
 */
#[Permission(menu: '{{ entityUpper }}', actions: [Permission::EDIT])]
#[Tag(name: '{{ entityHumanize }}')]
final class Put extends AbstractFOSRestController
{
    public function __construct(
        private FormFactory $formFactory,
        private {{ entityHumanize }}Service $service,
        private TranslatorInterface $translator,
    ) {
    }

    #[Route(data: '/{{ entityPluralDash }}/{id}', name: self::class)]
    #[Security(name: 'Bearer')]
    #[RequestBody(
        content: new OA\MediaType(
            mediaType: 'application/json',
            schema: new OA\Schema(ref: new Model(type: {{ entityHumanize }}Type::class), type: 'object'),
        ),
    )]
    #[OA\Response(
        response: 200,
        description: '{{ entityHumanize }} updated',
        content: new OA\MediaType(
            mediaType: 'application/json',
            schema: new OA\Schema(ref: new Model(type: {{ entityHumanize }}::class, groups: ['read']), type: 'object'),
        ),
    )]
    public function __invoke(Request $request, string $id): View
    {
        ${{ entityLowerize }} = $this->service->get($id);
        if (!${{ entityLowerize }} instanceof {{ entityHumanize }}Interface) {
            throw new NotFoundHttpException($this->translator->trans('sas.page.{{ entityLowerize }}.not_found', [], 'pages'));
        }

        $form = $this->formFactory->submitRequest({{ entityHumanize }}Type::class, $request, ${{ entityLowerize }});
        if (!$form->isValid()) {
            return $this->view((array) $form->getErrors(), Response::HTTP_BAD_REQUEST);
        }

        $this->service->save(${{ entityLowerize }});

        return $this->view($this->service->get(${{ entityLowerize }}->getId()));
    }
}
