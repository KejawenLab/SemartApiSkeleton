{% set entityHumanize = entity | humanize %}
{% set entityLowerize = entity | lower %}
{% set entityUpper = entity | upper %}
{% set entityPluralDash = entity | pluralize | dash %}
<?php

declare(strict_types=1);

namespace Alpabit\ApiSkeleton\Controller\{{ entityHumanize }};

use Alpabit\ApiSkeleton\Entity\{{ entityHumanize }};
use Alpabit\ApiSkeleton\Form\FormFactory;
use Alpabit\ApiSkeleton\Form\Type\{{ entityHumanize }}Type;
use Alpabit\ApiSkeleton\{{ entityHumanize }}\Model\{{ entityHumanize }}Interface;
use Alpabit\ApiSkeleton\{{ entityHumanize }}\{{ entityHumanize }}Service;
use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\View\View;
use Alpabit\ApiSkeleton\Security\Annotation\Permission;
use Nelmio\ApiDocBundle\Annotation\Model;
use Nelmio\ApiDocBundle\Annotation\Security;
use Psr\Log\LoggerInterface;
use Swagger\Annotations as SWG;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * @Permission(menu="{{ entityUpper }}", actions={Permission::ADD})
 *
 * @author Muhamad Surya Iksanudin<surya.iksanudin@alpabit.com>
*/
final class Post extends AbstractFOSRestController
{
    private $formFactory;

    private $service;

    private $logger;

    public function __construct(FormFactory $formFactory, {{ entityHumanize }}Service $service, LoggerInterface $auditLogger)
    {
        $this->formFactory = $formFactory;
        $this->service = $service;
        $this->logger = $auditLogger;
    }

    /**
    * @Rest\Post("/{{ entityPluralDash }}")
    *
    * @SWG\Tag(name="{{ entityHumanize }}")
    * @SWG\Parameter(
    *     name="{{ entityLowerize }}",
    *     in="body",
    *     type="object",
    *     description="{{ entityHumanize }} form",
    *     @Model(type={{ entityHumanize }}Type::class)
    * )
    * @SWG\Response(
    *     response=201,
    *     description="Crate new {{ entityLowerize }}",
    *     @SWG\Schema(
    *         type="object",
    *         ref=@Model(type={{ entityHumanize }}::class, groups={"read"})
    *     )
    * )
    *
    * @Security(name="Bearer")
    *
    * @param Request $request
    *
    * @return View
    */
    public function __invoke(Request $request): View
    {
        $form = $this->formFactory->submitRequest({{ entityHumanize }}Type::class, $request);
        if (!$form->isValid()) {
            return $this->view((array) $form->getErrors(), Response::HTTP_BAD_REQUEST);
        }

        /** @var {{ entityHumanize }}Interface ${{ entityLowerize }} */
        ${{ entityLowerize }} = $form->getData();
        $this->service->save(${{ entityLowerize }});

        $this->logger->info(sprintf('[%s][%s][%s]', $this->getUser()->getUsername(), __CLASS__, $request->getContent()));

        return $this->view($this->service->get(${{ entityLowerize }}->getId()), Response::HTTP_CREATED);
    }
}
