{% set entityHumanize = entity | humanize %}
{% set entityLowerize = entity | lower %}
{% set entityUpper = entity | upper %}
{% set entityPluralDash = entity | pluralize | dash %}
<?php

declare(strict_types=1);

namespace KejawenLab\Application\Admin\Controller\{{ entityHumanize }};

use KejawenLab\Application\Entity\{{ entityHumanize }};
use KejawenLab\Application\{{ entityHumanize }}\Model\{{ entityHumanize }}Interface;
use KejawenLab\Application\{{ entityHumanize }}\{{ entityHumanize }}Service;
use KejawenLab\ApiSkeleton\Security\Annotation\Permission;
use KejawenLab\ApiSkeleton\Util\StringUtil;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Permission(menu="{{ entityUpper }}", actions={Permission::VIEW})
 *
 * @author Muhamad Surya Iksanudin<surya.iksanudin@gmail.com>
 */
final class Get extends AbstractController
{
    public function __construct({{ entityHumanize }}Service $service, AuditService $audit, Reader $reader)
    {
    }

    /**
     * @Route("/{{ entityPluralDash }}/{id}", name=Get::class, methods={"GET"})
     */
    public function __invoke(string $id): Response
    {
        ${{ entityLowerize }} = $this->service->get($id);
        if (!${{ entityLowerize }} instanceof {{ entityHumanize }}Interface) {
            $this->addFlash('error', 'sas.page.{{ entityLowerize }}.not_found');

            return new RedirectResponse($this->generateUrl(GetAll::class));
        }

        $audit = ['items' => []];
        if ($this->reader->getProvider()->isAuditable({{ entityHumanize }}::class)) {
            $audit = $this->audit->getAudits(${{ entityLowerize }}, $id, 3)->toArray();
        }

        $class = new \ReflectionClass({{ entityHumanize }}::class);

        return $this->render('{{ entityLowerize }}/view.html.twig', [
            'page_title' => 'sas.page.{{ entityLowerize }}.view',
            'context' => StringUtil::lowercase($class->getShortName()),
            'properties' => $class->getProperties(\ReflectionProperty::IS_PRIVATE),
            'data' => ${{ entityLowerize }},
            'audits' => $audit['items'],
        ]);
    }
}
