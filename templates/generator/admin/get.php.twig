{%- set entityHumanize = entity | humanize -%}
{%- set entityLowerize = entity | lower -%}
{%- set entityUpper = entity | upper -%}
{%- set entityPluralDash = entity | pluralize | dash -%}
<?php

declare(strict_types=1);

namespace KejawenLab\Application\Admin\Controller\{{ entityHumanize }};

use DH\Auditor\Provider\Doctrine\Persistence\Reader\Reader;
use KejawenLab\ApiSkeleton\Admin\Controller\AbstractController;
use KejawenLab\ApiSkeleton\Audit\Audit as Record;
use KejawenLab\Application\Entity\{{ entityHumanize }};
use KejawenLab\Application\{{ entityHumanize }}\Model\{{ entityHumanize }}Interface;
use KejawenLab\Application\{{ entityHumanize }}\{{ entityHumanize }}Service;
use KejawenLab\ApiSkeleton\Audit\AuditService;
use KejawenLab\ApiSkeleton\Security\Annotation\Permission;
use KejawenLab\ApiSkeleton\Util\CacheFactory;
use ReflectionClass;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

/**
 * @author Muhamad Surya Iksanudin<surya.iksanudin@gmail.com>
 */
#[Permission(menu: '{{ entityUpper }}', actions: [Permission::VIEW])]
final class Get extends AbstractController
{
    public function __construct(
        private readonly RequestStack $requestStack,
        private {{ entityHumanize }}Service $service,
        private readonly CacheFactory $cache,
        private AuditService $audit,
        private Reader $reader,
    ) {
        parent::__construct($this->requestStack->getCurrentRequest(), $this->service, $this->cache);
    }

    #[Route(path: '/{{ entityPluralDash }}/{id}', name: self::class, methods: ['GET'])]
    public function __invoke(string $id): Response
    {
        ${{ entityLowerize }} = $this->service->get($id);
        if (!${{ entityLowerize }} instanceof {{ entityHumanize }}Interface) {
            $this->addFlash('error', 'sas.page.{{ entityLowerize }}.not_found');

            return new RedirectResponse($this->generateUrl(Main::class));
        }

        $audit = new Record(${{ entityLowerize }});
        if ($this->reader->getProvider()->isAuditable({{ entityHumanize }}::class)) {
            $audit = $this->audit->getAudits(${{ entityLowerize }}, $id, 1);
        }

        return $this->renderDetail($audit, new ReflectionClass({{ entityHumanize }}::class));
    }
}
